# Defining struct Layer
mutable struct Layer
    w::Array{Float64,2}
end

# Constructor to inicialize the weight o the layers 
Layer(input::Int, output::Int) = Layer(rand(Float64, (output, input)))

# Function to calculate a layer given the input
(l::Layer)(x) = (l.w * x)

# Defining layers
l1 = Layer(3, 4)
l2 = Layer(4, 3)
l3 = Layer(3, 1)

# Defining the initial vector
x = [5.0, 7.0, 9.0]

# Calculating values 
l1_values = l1(x)
l2_values = l2(l1_values)
y = l3(l2_values)

# Defining the estructure mutable Network
mutable struct Network
    layers::Vector{Layer}  # Layers is a vector
    Network(layers::Layer...) = new(collect(layers))
end

# Function that does all the calculations in one-single call
function (n::Network)(x)
    for l in n.layers
        x = l(x)  # Calculating the output of each layer cosidering the previous value
    end
    return x  # Final result
end

# We create a neural network with the layers
nn = Network(l1, l2, l3)

# Verify the weights of the layers
nn.layers[1].w
nn.layers[2].w
nn.layers[3].w

# Final result with input x
result = nn(x)
println("Resultado final: ", result)

